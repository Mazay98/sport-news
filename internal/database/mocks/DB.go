// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// DeleteMany provides a mock function with given fields: ctx, filter, opts
func (_m *DB) DeleteMany(ctx context.Context, filter interface{}, opts interface{}) (int64, error) {
	ret := _m.Called(ctx, filter, opts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) (int64, error)); ok {
		return rf(ctx, filter, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) int64); ok {
		r0 = rf(ctx, filter, opts)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}) error); ok {
		r1 = rf(ctx, filter, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields: ctx
func (_m *DB) Disconnect(ctx context.Context) {
	_m.Called(ctx)
}

// Find provides a mock function with given fields: ctx, filter, opts, dataType
func (_m *DB) Find(ctx context.Context, filter interface{}, opts interface{}, dataType interface{}) (interface{}, error) {
	ret := _m.Called(ctx, filter, opts, dataType)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, interface{}) (interface{}, error)); ok {
		return rf(ctx, filter, opts, dataType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, interface{}) interface{}); ok {
		r0 = rf(ctx, filter, opts, dataType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, interface{}) error); ok {
		r1 = rf(ctx, filter, opts, dataType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: ctx, filter, opts, dataType
func (_m *DB) FindOne(ctx context.Context, filter interface{}, opts interface{}, dataType interface{}) (interface{}, error) {
	ret := _m.Called(ctx, filter, opts, dataType)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, interface{}) (interface{}, error)); ok {
		return rf(ctx, filter, opts, dataType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, interface{}) interface{}); ok {
		r0 = rf(ctx, filter, opts, dataType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, interface{}) error); ok {
		r1 = rf(ctx, filter, opts, dataType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMany provides a mock function with given fields: ctx, documents
func (_m *DB) InsertMany(ctx context.Context, documents []interface{}) error {
	ret := _m.Called(ctx, documents)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}) error); ok {
		r0 = rf(ctx, documents)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
