// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "go.sport-news/internal/entity"
)

// NewsRepository is an autogenerated mock type for the NewsRepository type
type NewsRepository struct {
	mock.Mock
}

// Exist provides a mock function with given fields: ctx, field, value
func (_m *NewsRepository) Exist(ctx context.Context, field string, value interface{}) (bool, error) {
	ret := _m.Called(ctx, field, value)

	if len(ret) == 0 {
		panic("no return value specified for Exist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (bool, error)); ok {
		return rf(ctx, field, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) bool); ok {
		r0 = rf(ctx, field, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, field, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllExternalIds provides a mock function with given fields: ctx
func (_m *NewsRepository) GetAllExternalIds(ctx context.Context) (map[int]int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllExternalIds")
	}

	var r0 map[int]int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[int]int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[int]int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamNews provides a mock function with given fields: ctx, team
func (_m *NewsRepository) GetTeamNews(ctx context.Context, team string) ([]entity.Article, error) {
	ret := _m.Called(ctx, team)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamNews")
	}

	var r0 []entity.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Article, error)); ok {
		return rf(ctx, team)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Article); ok {
		r0 = rf(ctx, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamNewsByID provides a mock function with given fields: ctx, team, id
func (_m *NewsRepository) GetTeamNewsByID(ctx context.Context, team string, id string) (*entity.Article, error) {
	ret := _m.Called(ctx, team, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamNewsByID")
	}

	var r0 *entity.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.Article, error)); ok {
		return rf(ctx, team, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.Article); ok {
		r0 = rf(ctx, team, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, team, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertArticles provides a mock function with given fields: ctx, articles
func (_m *NewsRepository) InsertArticles(ctx context.Context, articles []entity.Article) error {
	ret := _m.Called(ctx, articles)

	if len(ret) == 0 {
		panic("no return value specified for InsertArticles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.Article) error); ok {
		r0 = rf(ctx, articles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNewsRepository creates a new instance of NewsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNewsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NewsRepository {
	mock := &NewsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
